# docker-compose-advanced.yml
# Advanced dataops stack for your target architecture

version: '3.8'

services:
  # Existing services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s

  airflow-scheduler:
    image: apache/airflow:2.9.0-python3.12
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
      GX_ROOT: /opt/airflow/gx
      AIRFLOW_DATA: /opt/airflow/data
      AWS_ACCESS_KEY_ID: minioadmin           
      AWS_SECRET_ACCESS_KEY: minioadmin       
      S3_ENDPOINT_URL: http://minio:9000      
      AWS_DEFAULT_REGION: us-east-1   
      _PIP_ADDITIONAL_REQUIREMENTS: "trino==0.330.0 pandas==2.2.2 great-expectations==0.18.17 requests==2.32.3"
        

    volumes:
      - ./orchestration/airflow_dags:/opt/airflow/dags
      - ./airflow_plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./data_quality/gx:/opt/airflow/gx
    depends_on:
      postgres:
        condition: service_healthy
      minio:                                  
        condition: service_started

  airflow-webserver:
    image: apache/airflow:2.9.0-python3.12
    command: webserver
    ports:
      - "8081:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
      GX_ROOT: /opt/airflow/gx
      AIRFLOW_DATA: /opt/airflow/data
      AWS_ACCESS_KEY_ID: minioadmin           
      AWS_SECRET_ACCESS_KEY: minioadmin       
      S3_ENDPOINT_URL: http://minio:9000     
      AWS_DEFAULT_REGION: us-east-1
      _PIP_ADDITIONAL_REQUIREMENTS: "trino==0.330.0 pandas==2.2.2 great-expectations==0.18.17 requests==2.32.3"
     
    volumes:
      - ./orchestration/airflow_dags:/opt/airflow/dags
      - ./airflow_plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./data_quality/gx:/opt/airflow/gx
    depends_on:
      postgres:
        condition: service_healthy
      minio:                                  
        condition: service_started

  # New services for advanced architecture
  
  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Apache Spark (for processing)
  spark-master:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"  # Spark UI
      - "7077:7077"  # Spark Master
    volumes:
      - ./data:/opt/bitnami/spark/data

  spark-worker:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - ./data:/opt/bitnami/spark/data

  # Trino (SQL query engine)
  trino-coordinator:
    image: trinodb/trino:latest
    ports:
      - "8082:8080"  # Trino UI
    environment:
      - TRINO_ENVIRONMENT=development
    volumes:
      - ./trino-config:/etc/trino
    depends_on:
      - postgres

  # Prometheus (metrics collection)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-config:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana (monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-config:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # Kafka (streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  # Jupyter (for data exploration)
  jupyter:
    image: jupyter/pyspark-notebook:latest
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./data:/home/jovyan/work/data
      - ./notebooks:/home/jovyan/work/notebooks
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"
  nessie:
    image: ghcr.io/projectnessie/nessie:0.99.0
    environment:
      QUARKUS_HTTP_PORT: 19120
    ports:
      - "19120:19120"
volumes:
  postgres_data:
  minio_data:
  prometheus_data:
  grafana_data:
